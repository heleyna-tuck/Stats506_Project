---
title: "Stats506_Project"
author: "Heleyna Tucker"
format: html
editor: visual
---

# Project - Light data in buildings

### Load in data:

```{r}
library(tidyverse)
energy <- read_csv('/Users/19892/Downloads/cbecs2018_final_public.csv')
engery_comp <- energy[c("LTZHRP", "LTOHRP", "LTNHRP", "FLUORP", "CFLRP", "BULBP", "HALOP", "HIDP", "LEDP", "LEDP", "OTLTP"),]
```

Read in File below and get necessary data:

```{r}
energy <- read_csv('/Users/19892/Downloads/cbecs2018_final_public.csv')
energy_comp <- energy[c("PUBID","LTZHRP", "LTOHRP", "LTNHRP", "FLUORP", "CFLRP", "BULBP", "HALOP", "HIDP", "LEDP", "OTLTP")]
head(energy_comp)
```

```{r}
#Rename columns to be easily identifiable
colnames(energy_comp) <- c("buildingID", "pLitNoHours", "pLitOpen", "pLitOffHours", "pFluor", "pCompFluor", "pIncandes", "pHalogen", "pHID", "pLED", "pOther")
head(energy_comp)
```

For the sake of data analysis, I will assume that the NA values are 0 percentage values:

```{r}
energy_comp[is.na(energy_comp)] <- 0

#Add varivale to total the percentage of lights in each building:
energy_comp["pTotalLights"] <- energy_comp$pFluor + energy_comp$pCompFluor + energy_comp$pIncandes + energy_comp$pHalogen + energy_comp$pHID + energy_comp$pLED + energy_comp$pOther

```

Because some totals add up to over/under 100% or 0% which means there was some inconsistency in the data collection for this dataset. For the sake of this project, I will remove these values from the data we will be doing the analysis on:

```{r}
length(which(energy_comp$pTotalLights ==100))
length(energy_comp$pTotalLights)
```

As we can see above, there is about 80% of the data that has the percentage of lights that add up to 100%, still giving us a good amount of data to work with.

```{r}
#Remove rows of data that have pTotalLights not equal to 100
energy_comp <- energy_comp[energy_comp$pTotalLights == 100, ]
dim(energy_comp)
head(energy_comp)
```

Look at a Summary:

```{r}
summary(energy_comp)
```

### Preliminary Graphs:

```{r}
correlation_matrix <- cor(energy_comp[, c("pLitOpen", "pLitOffHours", "pLitNoHours", "pFluor", "pCompFluor", "pIncandes", "pHalogen", "pHID", "pLED", "pOther")])
correlation_matrix

heatmap(correlation_matrix, 
        col = colorRampPalette(c("blue", "white", "red"))(100),
        scale = "column",  # Add a legend for columns
        main = "Correlation Heatmap with Legend"
)
```

### Try KMeans clustering:

```{r}
# Assuming df is your data frame with lighting percentages
set.seed(123)  # for reproducibility
k <- 15  # specify the number of clusters
kmeans_result <- kmeans(energy_comp[, c("pFluor", "pCompFluor", "pIncandes", "pHalogen", "pHID", "pLED", "pOther")], centers = k)
energy_comp$cluster <- as.factor(kmeans_result$cluster)
head(energy_comp)
```

```{r}
library(ggplot2)

# Scatter plot
ggplot(energy_comp, aes(x = cluster, y = pLitOpen, color = cluster)) +
  geom_point(position = position_dodge(width = 0.8), size = 3) +
  labs(title = "Cluster Distribution of Buildings based on Percent Lit Open",
       x = "Cluster Number",
       y = "Percentage of Lighting Open") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability

# Scatter plot
ggplot(energy_comp, aes(x = cluster, y = pLitOffHours, color = cluster)) +
  geom_point(position = position_dodge(width = 0.8), size = 3) +
  labs(title = "Cluster Distribution of Buildings based on Percent Lit Open",
       x = "Cluster Number",
       y = "Percentage of Lighting Off Hours") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
```

Summary Stats for each Cluster:

```{r}
# Calculate summary statistics for each cluster
cluster_summary <- aggregate(. ~ cluster, data = energy_comp[, c("cluster", "pLitOpen", "pLitOffHours", "pLitNoHours","pFluor", "pCompFluor", "pIncandes", "pHalogen", "pHID", "pLED", "pOther")], mean)

# Print the summary
print(cluster_summary)
```

```{r}
k <- 3
kmeans_results <- kmeans(energy_comp, centers = k, nstart = 20)
```

Examine results of the clustering:

```{r}
#Cluster centers:
kmeans_results$centers

#Cluster assignment for each building:
cluster_assignment <- kmeans_results$cluster
```

Visualization:

```{r}
library(GGally)

ggplot(data.frame(energy_comp, cluster = factor(cluster_assignment)), aes(color = cluster)) +
  ggpairs(mapping = aes(color = cluster))
```
